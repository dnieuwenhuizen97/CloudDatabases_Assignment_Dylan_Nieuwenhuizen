// <auto-generated />
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20211019062946_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domains.Customer", b =>
                {
                    b.Property<string>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domains.FinancialInformation", b =>
                {
                    b.Property<string>("FinancialInformationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("AnnualSalary")
                        .HasColumnType("float");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("FinancialInformationId");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.ToTable("FinancialInformation");
                });

            modelBuilder.Entity("Domains.House", b =>
                {
                    b.Property<string>("HouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("HouseId");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("Domains.Image", b =>
                {
                    b.Property<string>("ImageKey")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("HouseId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ImageLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ImageKey");

                    b.HasIndex("HouseId");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("Domains.MortgageOffer", b =>
                {
                    b.Property<string>("MortgageOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("MaxAmountToBorrow")
                        .HasColumnType("float");

                    b.HasKey("MortgageOfferId");

                    b.HasIndex("CustomerId")
                        .IsUnique()
                        .HasFilter("[CustomerId] IS NOT NULL");

                    b.ToTable("MortgageOffer");
                });

            modelBuilder.Entity("Domains.FinancialInformation", b =>
                {
                    b.HasOne("Domains.Customer", "Customer")
                        .WithOne("FinancialInformation")
                        .HasForeignKey("Domains.FinancialInformation", "CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domains.Image", b =>
                {
                    b.HasOne("Domains.House", "House")
                        .WithMany("Images")
                        .HasForeignKey("HouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("House");
                });

            modelBuilder.Entity("Domains.MortgageOffer", b =>
                {
                    b.HasOne("Domains.Customer", "Customer")
                        .WithOne("MortgageOffers")
                        .HasForeignKey("Domains.MortgageOffer", "CustomerId");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domains.Customer", b =>
                {
                    b.Navigation("FinancialInformation");

                    b.Navigation("MortgageOffers");
                });

            modelBuilder.Entity("Domains.House", b =>
                {
                    b.Navigation("Images");
                });
#pragma warning restore 612, 618
        }
    }
}
